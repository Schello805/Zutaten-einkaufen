import Foundation
import SwiftUI

enum Category: String, Codable, CaseIterable {
    case produce = "Obst & Gem√ºse"
    case dairy = "Milchprodukte"
    case bakery = "Backwaren"
    case meat = "Fleisch & Fisch"
    case pantry = "Vorrat"
    case spices = "Gew√ºrze"
    case oils = "√ñle & Fette"
    case other = "Sonstiges"
    
    var icon: String {
        switch self {
        case .produce: return "ü•ï"
        case .dairy: return "ü•õ"
        case .bakery: return "ü•ñ"
        case .meat: return "ü•©"
        case .pantry: return "ü•´"
        case .spices: return "üßÇ"
        case .oils: return "üßà"
        case .other: return "üõí"
        }
    }
    
    static func getSpecificIcon(for ingredient: String) -> String? {
        let ingredientMap: [String: String] = [
            // Basis-Backzutaten
            "ei": "ü•ö",
            "eier": "ü•ö",
            "milch": "ü•õ",
            "butter": "üßà",
            "mehl": "üåæ",
            "zucker": "üßÇ",
            "vanille": "üå∫",
            "vanillezucker": "üå∫",
            "vanilleextrakt": "üå∫",
            "vanilleschote": "üå∫",
            "backpulver": "üßÇ",
            "hefe": "üß¨",
            
            // Gem√ºse
            "karotte": "ü•ï",
            "m√∂hre": "ü•ï",
            "kartoffel": "ü•î",
            "tomate": "üçÖ",
            "salat": "ü•¨",
            "gurke": "ü•í",
            "zwiebel": "üßÖ",
            "knoblauch": "üßÑ",
            "paprika": "ü´ë",
            "brokkoli": "ü•¶",
            "pilz": "üçÑ",
            "mais": "üåΩ",
            
            // Obst
            "apfel": "üçé",
            "birne": "üçê",
            "orange": "üçä",
            "zitrone": "üçã",
            "banane": "üçå",
            "erdbeere": "üçì",
            "blaubeere": "ü´ê",
            "traube": "üçá",
            "wassermelone": "üçâ",
            "kiwi": "ü•ù",
            "pfirsich": "üçë",
            "avocado": "ü•ë",
            
            // Milchprodukte
            "k√§se": "üßÄ",
            "joghurt": "ü•õ",
            "sahne": "ü•õ",
            "quark": "ü•õ",
            "schmand": "ü•õ",
            
            // Backwaren
            "brot": "üçû",
            "br√∂tchen": "ü•ñ",
            "croissant": "ü•ê",
            "brezel": "ü•®",
            "kuchen": "üç∞",
            
            // Fleisch & Fisch
            "fleisch": "ü•©",
            "steak": "ü•©",
            "h√§hnchen": "üçó",
            "wurst": "üå≠",
            "schinken": "ü•ì",
            "fisch": "üêü",
            "lachs": "üêü",
            "garnele": "ü¶ê",
            
            // Grundnahrungsmittel
            "reis": "üçö",
            "nudel": "üçù",
            "spaghetti": "üçù",
            "bohne": "ü´ò",
            
            // Gew√ºrze & Kr√§uter
            "salz": "üßÇ",
            "pfeffer": "üßÇ",
            "chili": "üå∂Ô∏è",
            "basilikum": "üåø",
            "oregano": "üåø",
            "rosmarin": "üåø",
            "thymian": "üåø",
            
            // √ñle & Fette
            "√∂l": "ü´ó",
            "oliven√∂l": "ü´ó",
            "margarine": "üßà",
            
            // Getr√§nke
            "wasser": "üíß",
            "wein": "üç∑",
            "bier": "üç∫",
            "saft": "üßÉ",
            "kaffee": "‚òïÔ∏è",
            "tee": "ü´ñ",
            
            // Snacks & S√º√üigkeiten
            "schokolade": "üç´",
            "keks": "üç™",
            "chips": "ü•®",
            "nuss": "ü•ú",
            "erdnuss": "ü•ú",
            "mandel": "ü•ú",
            "popcorn": "üçø",
            
            // Saucen & Dips
            "ketchup": "ü•´",
            "mayonnaise": "ü•´",
            "senf": "ü•´",
            "so√üe": "ü•´",
            "sauce": "ü•´"
        ]
        
        // Pr√ºfe verschiedene Varianten des Zutatennamen
        let variations = [
            ingredient,
            ingredient.replacingOccurrences(of: "e", with: ""),  // F√ºr Plural-Varianten
            String(ingredient.dropLast()),  // F√ºr Singular/Plural
            ingredient + "n"  // F√ºr Plural
        ]
        
        for variation in variations {
            if let icon = ingredientMap[variation] {
                return icon
            }
        }
        
        return nil
    }
    
    var color: Color {
        switch self {
        case .produce: return .green
        case .dairy: return .blue
        case .bakery: return .brown
        case .meat: return .red
        case .pantry: return .orange
        case .spices: return .purple
        case .oils: return .yellow
        case .other: return .gray
        }
    }
    
    static func detect(from item: String) -> Category {
        let lowercased = item.lowercased()
        
        // Milchprodukte
        if lowercased.contains("milch") || lowercased.contains("k√§se") || lowercased.contains("joghurt") || 
           lowercased.contains("sahne") || lowercased.contains("quark") || lowercased.contains("schmand") {
            return .dairy
        }
        
        // Fette & √ñle
        if lowercased.contains("butter") || lowercased.contains("√∂l") || lowercased.contains("margarine") ||
           lowercased.contains("schmalz") {
            return .oils
        }
        
        // Gew√ºrze
        if lowercased.contains("gew√ºrz") || lowercased.contains("salz") || lowercased.contains("pfeffer") ||
           lowercased.contains("zimt") || lowercased.contains("curry") || lowercased.contains("paprika") ||
           lowercased.contains("kr√§uter") || lowercased.contains("basilikum") || lowercased.contains("oregano") {
            return .spices
        }
        
        // Backwaren
        if lowercased.contains("mehl") || lowercased.contains("brot") || lowercased.contains("br√∂tchen") || 
           lowercased.contains("kuchen") || lowercased.contains("toast") || lowercased.contains("semmel") ||
           lowercased.contains("teig") {
            return .bakery
        }
        
        // Obst & Gem√ºse
        if lowercased.contains("apfel") || lowercased.contains("banane") || lowercased.contains("karotte") || 
           lowercased.contains("salat") || lowercased.contains("tomate") || lowercased.contains("gurke") ||
           lowercased.contains("zwiebel") || lowercased.contains("knoblauch") || lowercased.contains("obst") ||
           lowercased.contains("gem√ºse") || lowercased.contains("birne") || lowercased.contains("orange") ||
           lowercased.contains("zitrone") || lowercased.contains("kartoffel") || lowercased.contains("m√∂hre") {
            return .produce
        }
        
        // Fleisch & Fisch
        if lowercased.contains("fleisch") || lowercased.contains("wurst") || lowercased.contains("fisch") ||
           lowercased.contains("schinken") || lowercased.contains("h√§hnchen") || lowercased.contains("rind") ||
           lowercased.contains("schwein") || lowercased.contains("lachs") || lowercased.contains("thunfisch") {
            return .meat
        }
        
        // Vorrat
        if lowercased.contains("dose") || lowercased.contains("konserve") || lowercased.contains("nudel") ||
           lowercased.contains("reis") || lowercased.contains("zucker") || lowercased.contains("mehl") ||
           lowercased.contains("m√ºsli") || lowercased.contains("cornflakes") || lowercased.contains("sauce") {
            return .pantry
        }
        
        return .other
    }
}

struct Quantity: Codable, Equatable {
    var amount: Double
    var unit: String
    
    static func parse(from text: String) -> Quantity? {
        let pattern = #"(\d+(?:[.,]\d+)?)\s*([a-zA-Z√§√∂√º√Ñ√ñ√ú√ü]+)?"#
        let regex = try? NSRegularExpression(pattern: pattern, options: [])
        
        if let match = regex?.firstMatch(in: text, options: [], range: NSRange(text.startIndex..., in: text)) {
            if let amountRange = Range(match.range(at: 1), in: text) {
                let amountStr = text[amountRange].replacingOccurrences(of: ",", with: ".")
                if let amount = Double(amountStr) {
                    var unit: String? = nil
                    if match.numberOfRanges > 2, let unitRange = Range(match.range(at: 2), in: text) {
                        unit = String(text[unitRange])
                    }
                    return Quantity(amount: amount, unit: unit ?? "")
                }
            }
        }
        return nil
    }
    
    func toString() -> String {
        let formatter = NumberFormatter()
        formatter.minimumFractionDigits = 0
        formatter.maximumFractionDigits = 2
        
        if let formattedAmount = formatter.string(from: NSNumber(value: amount)) {
            return "\(formattedAmount) \(unit)".trimmingCharacters(in: .whitespaces)
        }
        return "\(amount) \(unit)".trimmingCharacters(in: .whitespaces)
    }
    
    static func + (lhs: Quantity, rhs: Quantity) -> Quantity? {
        let normalizedLHS = normalizeUnit(lhs)
        let normalizedRHS = normalizeUnit(rhs)
        
        if normalizedLHS.unit == normalizedRHS.unit {
            return Quantity(amount: normalizedLHS.amount + normalizedRHS.amount, unit: normalizedLHS.unit)
        }
        return nil
    }
    
    private static func normalizeUnit(_ quantity: Quantity) -> Quantity {
        let unit = quantity.unit.lowercased()
        var amount = quantity.amount
        var normalizedUnit = unit
        
        switch unit {
        case "kg":
            amount *= 1000
            normalizedUnit = "g"
        case "l":
            amount *= 1000
            normalizedUnit = "ml"
        case "el", "essl√∂ffel":
            amount *= 15
            normalizedUnit = "ml"
        case "tl", "teel√∂ffel":
            amount *= 5
            normalizedUnit = "ml"
        default:
            break
        }
        
        return Quantity(amount: amount, unit: normalizedUnit)
    }
}

struct ItemQuantity: Codable, Identifiable {
    let id: UUID
    var quantity: Quantity
    var recipe: String
    
    init(id: UUID = UUID(), quantity: Quantity, recipe: String) {
        self.id = id
        self.quantity = quantity
        self.recipe = recipe
    }
}

struct GroceryItem: Identifiable, Codable {
    let id: UUID
    var name: String
    var quantities: [ItemQuantity]
    var category: Category
    var isChecked: Bool
    var dateAdded: Date
    var icon: String {
        // Erst pr√ºfen ob es ein spezifisches Icon f√ºr die Zutat gibt
        if let specificIcon = Category.getSpecificIcon(for: name.lowercased()) {
            return specificIcon
        }
        
        // Ansonsten das Kategorie-Icon verwenden
        return category.icon
    }
    
    init(id: UUID = UUID(), name: String, quantity: Quantity? = nil, recipe: String = "", category: Category = .other, isChecked: Bool = false) {
        self.id = id
        self.name = name
        self.quantities = quantity.map { [ItemQuantity(quantity: $0, recipe: recipe)] } ?? []
        self.category = category
        self.isChecked = isChecked
        self.dateAdded = Date()
    }
    
    var totalQuantity: Quantity? {
        guard !quantities.isEmpty else { return nil }
        
        let firstQuantity = quantities[0].quantity
        var total = firstQuantity
        
        for i in 1..<quantities.count {
            if let sum = total + quantities[i].quantity {
                total = sum
            }
        }
        
        return total
    }
    
    mutating func addQuantity(_ quantity: Quantity, recipe: String) {
        quantities.append(ItemQuantity(quantity: quantity, recipe: recipe))
    }
    
    func formatQuantities() -> String {
        var result = ""
        
        for itemQuantity in quantities {
            if !result.isEmpty { result += "\n" }
            result += "\(itemQuantity.quantity.toString()) \(itemQuantity.recipe)"
        }
        
        if let total = totalQuantity, quantities.count > 1 {
            result += "\n= \(total.toString()) gesamt"
        }
        
        return result
    }
}
